buildscript {
    dependencies {
        classpath "org.gradle.samples:header-gradle-plugin:latest.integration"
    }
}


plugins {
    id 'xcode'
    id 'visual-studio'
    id 'maven-publish'
    id 'cpp-unit-test'
}

apply plugin: 'org.gradle.samples.cpp-header-library'

group = 'org.gradle.cpp-samples'
version = '1.5'

repositories {
    maven {
        url = 'https://repo.gradle.org/gradle/libs-snapshots-local/'
    }
}

// Also, as the Gradle publishing format for C++ is not yet stable, encode the Gradle metadata version in the module as well
// None of this will be necessarily in later releases and Gradle will take care of these things instead
unitTest {
    binaries.whenElementFinalized {
        def metadataFormat = org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser.FORMAT_VERSION

        dependencies {
            implementation "org.gradle.cpp-samples:googletest_${metadataFormat}:latest.integration"
        }
    }
}

tasks.withType(CppCompile) {
    // Use C++03 with the old ABIs, as this is what the googletest binaries were built with
    // Later, Gradle's dependency management will understand ABI
    macros _GLIBCXX_USE_CXX11_ABI: '0'

    compilerArgs.addAll toolChain.map { NativeToolChain toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc) {
            compilerSpecificArgs << '-std=c++03'
        }
        return compilerSpecificArgs
    }
}

tasks.withType(LinkSharedLibrary) {
    linkerArgs.addAll toolChain.map { NativeToolChain toolChain ->
        List<String> compilerSpecificArgs = []
        if (toolChain instanceof Gcc) {
            compilerSpecificArgs << '-std=c++03'
        }
        return compilerSpecificArgs
    }
}

publishing {
    repositories {
        maven {
            url = '../repo'
        }
    }
}
